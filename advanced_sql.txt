-- 01 ###################################################################################################################

drop table Premium;

create table Premium(
    Policy_num varchar2(10),
    Coverage_no varchar2(10),
    Prem INTEGER 
);

select * from Premium;

--------------------------------------------------------
POLICY_NUM	COVERAGE_NO			PREM
P1			C4			150
P2			C5			250
P1			C1			100
P1			C2			100
P2			C1			100
P2			C3			100
P1			C3			100
-------------------------------------------------------

insert into Premium (policy_num, Coverage_no, Prem) values ('P1', 'C1', 100);
insert into Premium (policy_num, Coverage_no, Prem) values ('P1', 'C2', 100);
insert into Premium (policy_num, Coverage_no, Prem) values ('P2', 'C1', 100);
insert into Premium (policy_num, Coverage_no, Prem) values ('P2', 'C3', 100);
insert into Premium (policy_num, Coverage_no, Prem) values ('P1', 'C3', 100);
insert into Premium (policy_num, Coverage_no, Prem) values ('P1', 'C4', 150);
insert into Premium (policy_num, Coverage_no, Prem) values ('P2', 'C5', 250);

with 
    A as (select Policy_num, count(1) as cnnt, sum(Prem) as summ from Premium group by Policy_num),
    B as (select Policy_num, count(1) as cnt1 from Premium where Coverage_no = 'C1' group by Policy_num),
    C as (select Policy_num, count(1) as cnt2 from Premium where Coverage_no = 'C2' group by Policy_num),
    D as (select Policy_num, count(1) as cnt3 from Premium where Coverage_no = 'C3' group by Policy_num)
select A1.policy_num "Policy Number", A1.cnnt "No. of Coverages", nvl(B1.cnt1,0) "C1", nvl(C1.cnt2,0) "C2", nvl(D1.cnt3,0) "C3", A1.summ "Total Premium" from A A1, B B1, C C1, D D1
where A1.Policy_num = B1.Policy_num(+) and A1.Policy_num = C1.Policy_num(+) and A1.Policy_num = D1.Policy_num(+);

with
    A as (select Policy_num, count(1) as cnnt, sum(Prem) as summ from Premium group by Policy_num),
    B as (SELECT * FROM
    	(SELECT Policy_num, Coverage_no FROM Premium)
		PIVOT
        (
          COUNT(Coverage_no)
          FOR Coverage_no IN ('C1' C1,'C2' C2,'C3' C3, 'C4' C4, 'C5' C5)
        )
        ORDER BY Policy_num)
select B.Policy_num "Policy Number", A.cnnt "No. of Coverages", B.C1, B.C2, B.C3, B.C4, B.C5, A.summ "Total Premium" from A, B where A.Policy_num = B.Policy_num;

-----------------------------------------------------------------------------------------------
Policy Number	No. of Coverages	C1	C2	C3	C4	C5	Total Premium
P1		4			1	1	1	1	0	450
P2		3			1	0	1	0	1	450
-------------------------------------------------------------------------------------------------

-- 02 ###################################################################################################################

drop table Prm_prd;

create table Prm_prd(
    Policy_num varchar2(10),
    Start_Date date,
    End_Date date,
    Prem INTEGER 
);

truncate table Prm_prd;

insert into Prm_prd (policy_num, Start_Date, End_Date, Prem) values ('PC1', TO_DATE('01-01-23', 'DD-MM-YYYY'),TO_DATE('31-03-23', 'DD-MM-YYYY'), 120);
insert into Prm_prd (policy_num, Start_Date, End_Date, Prem) values ('PC2', TO_DATE('01-01-24', 'DD-MM-YYYY'),TO_DATE('31-05-24', 'DD-MM-YYYY'), 120);
insert into Prm_prd (policy_num, Start_Date, End_Date, Prem) values ('P1', TO_DATE('01-01-23', 'DD-MM-YYYY'),TO_DATE('31-12-23', 'DD-MM-YYYY'), 120);
insert into Prm_prd (policy_num, Start_Date, End_Date, Prem) values ('P2', TO_DATE('01-02-23', 'DD-MM-YYYY'),TO_DATE('31-10-23', 'DD-MM-YYYY'), 90);
insert into Prm_prd (policy_num, Start_Date, End_Date, Prem) values ('P3', TO_DATE('01-01-23', 'DD-MM-YYYY'),TO_DATE('31-05-23', 'DD-MM-YYYY'), 50);

select * from Prm_prd;

-------------------------------------------------------------
POLICY_NUM	START_DATE	END_DATE	PREM
PC2		01-JAN-24	31-MAY-24	120
P1		01-JAN-23	31-DEC-23	120
P2		01-FEB-23	31-OCT-23	90
P3		01-JAN-23	31-MAY-23	50
PC1		01-JAN-23	31-MAR-23	120
------------------------------------------------------------

select 
    level lvl, 
    policy_num Policy, 
    --(level-1) lvl, 
    add_months(Start_Date, level-1) as "_Start_Date_",
    add_months(Start_Date, level)-1 as "_End_Date_",
    Prem/round(months_between(End_Date,Start_Date)) as "Premiumm"
from Prm_prd  
connect by rowid = prior rowid and level < round(months_between(End_Date, Start_Date)+1)
    and prior sys_guid() is not null
    order by Policy, lvl;


------------------------------------------------------------------
LVL	POLICY	_Start_Date_	_End_Date_	Premiumm
1	P1	01-Jan-23	31-Jan-23	10
2	P1	01-Feb-23	28-Feb-23	10
3	P1	01-Mar-23	31-Mar-23	10
4	P1	01-Apr-23	30-Apr-23	10
5	P1	01-May-23	31-May-23	10
6	P1	01-Jun-23	30-Jun-23	10
7	P1	01-Jul-23	31-Jul-23	10
8	P1	01-Aug-23	31-Aug-23	10
9	P1	01-Sep-23	30-Sep-23	10
10	P1	01-Oct-23	31-Oct-23	10
11	P1	01-Nov-23	30-Nov-23	10
12	P1	01-Dec-23	31-Dec-23	10
1	P2	01-Feb-23	28-Feb-23	10
2	P2	01-Mar-23	31-Mar-23	10
3	P2	01-Apr-23	30-Apr-23	10
4	P2	01-May-23	31-May-23	10
5	P2	01-Jun-23	30-Jun-23	10
6	P2	01-Jul-23	31-Jul-23	10
7	P2	01-Aug-23	31-Aug-23	10
8	P2	01-Sep-23	30-Sep-23	10
9	P2	01-Oct-23	31-Oct-23	10
1	P3	01-Jan-23	31-Jan-23	10
2	P3	01-Feb-23	28-Feb-23	10
3	P3	01-Mar-23	31-Mar-23	10
4	P3	01-Apr-23	30-Apr-23	10
5	P3	01-May-23	31-May-23	10
1	PC1	01-Jan-23	31-Jan-23	40
2	PC1	01-Feb-23	28-Feb-23	40
3	PC1	01-Mar-23	31-Mar-23	40
1	PC2	01-Jan-24	31-Jan-24	24
2	PC2	01-Feb-24	29-Feb-24	24
3	PC2	01-Mar-24	31-Mar-24	24
4	PC2	01-Apr-24	30-Apr-24	24
5	PC2	01-May-24	31-May-24	24
------------------------------------------------------------------

-- 03 ###################################################################################################################

drop table att;

create table att(
    id varchar(10) not null,
    swipe_tym timestamp(2) not null,
    flag varchar(5) CHECK (flag = 'IN' or flag = 'OUT')
);

insert into att values('A11','18-OCT-23 09:05:12.000 AM', 'IN');
insert into att values('A11','18-OCT-23 12:05:12.000 PM', 'OUT');
insert into att values('A11','18-OCT-23 02:03:30.000 PM', 'IN');
insert into att values('A11','18-OCT-23 06:13:50.000 PM', 'OUT');
insert into att values('A12','18-OCT-23 09:07:12.000 AM', 'IN');
insert into att values('A12','18-OCT-23 12:17:12.000 PM', 'OUT');
insert into att values('A12','18-OCT-23 02:05:40.000 PM', 'IN');
insert into att values('A12','18-OCT-23 06:15:10.000 PM', 'OUT');

select * from att;

--------------------------------------------
ID	SWIPE_TYM	FLAG
A11	18-OCT-23 09.05.12.000000 AM	IN
A11	18-OCT-23 12.05.12.000000 PM	OUT
A11	18-OCT-23 02.03.30.000000 PM	IN
A11	18-OCT-23 06.13.50.000000 PM	OUT
A12	18-OCT-23 09.07.12.000000 AM	IN
A12	18-OCT-23 12.17.12.000000 PM	OUT
A12	18-OCT-23 02.05.40.000000 PM	IN
A12	18-OCT-23 06.15.10.000000 PM	OUT
----------------------------------------------

with 
    off_in as (select id, swipe_tym, flag, dense_rank() over (order by id, swipe_tym) as rank 
    from att where flag = 'IN' order by id, swipe_tym),
    
	off_out as (select id, swipe_tym, flag, dense_rank() over (order by id, swipe_tym) as rank 
    from att where flag = 'OUT' order by id, swipe_tym),
    
	emp_dtls as (select i.rank, i.id emp_id, o.swipe_tym out_time, i.swipe_tym in_time, 
    (o.swipe_tym - i.swipe_tym) difference,
    EXTRACT(Day FROM(o.swipe_tym - i.swipe_tym) DAY TO SECOND) as Day,
    EXTRACT(HOUR FROM(o.swipe_tym - i.swipe_tym) DAY TO SECOND) as Hour,
	EXTRACT(Minute FROM(o.swipe_tym - i.swipe_tym) DAY TO SECOND) as Minute,
	EXTRACT(SECOND FROM(o.swipe_tym - i.swipe_tym) DAY TO SECOND) as second
    from off_in i inner join off_out o on i.rank = o.rank and i.id = o.id),
    
	emp_dtls_sec as (select rank, emp_id, out_time, in_time, difference,
    (Day*86400)+(Hour*3600)+(Minute*60)+Second total_second from emp_dtls)

	(select EMP_ID, sum(total_second) from emp_dtls_sec group by emp_id);

-------------------------------
EMP_ID	SUM(TOTAL_SECOND)
A12	26370
A11	25820
--------------------------------

-- 04 ###################################################################################################################

CREATE TABLE attandance_log (
    emp_id  INT,
    log_date DATE,
    flag CHAR
);

insert all 
    into attandance_log(emp_id,log_date,flag) values (101,'02-JAN-2024','N')
    into attandance_log(emp_id,log_date,flag) values (101,'03-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (101,'04-JAN-2024','N')
    into attandance_log(emp_id,log_date,flag) values (101,'07-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (102,'01-JAN-2024','N')
    into attandance_log(emp_id,log_date,flag) values (102,'02-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (102,'03-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (102,'04-JAN-2024','N')
    into attandance_log(emp_id,log_date,flag) values (102,'05-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (102,'06-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (102,'07-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (103,'01-JAN-2024','N')
    into attandance_log(emp_id,log_date,flag) values (103,'04-JAN-2024','N')
    into attandance_log(emp_id,log_date,flag) values (103,'05-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (103,'06-JAN-2024','Y')
    into attandance_log(emp_id,log_date,flag) values (103,'07-JAN-2024','N')
SELECT 1 FROM dual;

select * from attandance_log;

-------------------------------
EMP_ID	LOG_DATE	FLAG
101	02-JAN-24	N
101	03-JAN-24	Y
101	04-JAN-24	N
101	07-JAN-24	Y
102	01-JAN-24	N
102	02-JAN-24	Y
102	03-JAN-24	Y
102	04-JAN-24	N
102	05-JAN-24	Y
102	06-JAN-24	Y
102	07-JAN-24	Y
103	01-JAN-24	N
103	04-JAN-24	N
103	05-JAN-24	Y
103	06-JAN-24	Y
103	07-JAN-24	N
--------------------------------

with
    cte as (select * from attandance_log where flag = 'Y'),
	final_table as (select emp_id, log_date, EXTRACT( DAY FROM TO_DATE(log_date, 'DD-Mon-YYYY')) as day, dense_rank() over (partition by emp_id order by log_date) as drnk, 
    EXTRACT( DAY FROM TO_DATE(log_date, 'DD-Mon-YYYY')) - dense_rank() over (partition by emp_id order by log_date) as diff 
    from cte),
	finale as (select emp_id, diff, MIN(log_date) as start_date, MAX(log_date) as end_date, count(1) as consecutive_days from final_table group by emp_id, diff having count(1)> 1)
    select emp_id, start_date, end_date, consecutive_days from finale;

----------------------------------------------------------
EMP_ID	START_DATE	END_DATE	CONSECUTIVE_DAYS
102	02-JAN-24	03-JAN-24	2
102	05-JAN-24	07-JAN-24	3
103	05-JAN-24	06-JAN-24	2
-----------------------------------------------------------

-- 05 ###################################################################################################################

drop table empp;

create table empp(
name varchar(30),
age int
);


insert into empp(name, age) values ('Alice', 28);
insert into empp(name, age) values ('Bob', 35);
insert into empp(name, age) values ('Charlie', 42);
insert into empp(name, age) values ('David', 25);
insert into empp(name, age) values ('Eva', 31);
insert into empp(name, age) values ('Frank', 38);
insert into empp(name, age) values ('Grace', 45);
insert into empp(name, age) values ('Henry', 29);

select * from empp;

--------------
NAME	AGE
Alice	28
Bob	35
Charlie	42
David	25
Eva	31
Frank	38
Grace	45
Henry	29
--------------

--- method 1 ---

select name, age from
(select e.*, NTILE(4) over(order by ROWID) part 
  from empp e) where part = 3;

select name, age from
(select e.*, NTILE(4) over(order by ROWNUM) part 
  from empp e) where part = 3;

--- method 2 ---

SELECT e.* FROM empp e ORDER BY ROWNUM OFFSET (select count(1)/2 from empp) ROWS FETCH NEXT (select count(1)/4 from empp) ROWS ONLY;

--------------
NAME	AGE
Eva	31
Frank	38
--------------

-- 06 ###################################################################################################################

drop table student_tab;

create table student_tab(
    id number,
    student varchar(20)
);

insert all
    into student_tab(id, student) values (1, 'Abbot')
    into student_tab(id, student) values (2, 'Doris')
    into student_tab(id, student) values (3, 'Emerson')
    into student_tab(id, student) values (4, 'Green')
    into student_tab(id, student) values (5, 'Jeames')
select 1 from dual;

select * from student_tab;

-----------------
ID	STUDENT
1	Abbot
2	Doris
3	Emerson
4	Green
5	Jeames
-----------------

with cte as 
    (select id, student, lead(student) over (order by id) as next_student, lag(student) over (order by id) as prev_student from student_tab)
    select id, case when mod(id,2) != 0 then coalesce(next_student, student)  else prev_student end as student from cte;

-----------------
ID	STUDENT
1	Doris
2	Abbot
3	Green
4	Emerson
5	Jeames
-----------------

-- 07 ###################################################################################################################

create table sales (
    prdct_id number,
    year number,
    sales number
);

insert all 
    into sales(prdct_id,year,sales) values (1,2019,1000)
    into sales(prdct_id,year,sales) values (1,2020,1200)
    into sales(prdct_id,year,sales) values (1,2021,1100)
    into sales(prdct_id,year,sales) values (2,2019,500)
    into sales(prdct_id,year,sales) values (2,2020,600)
    into sales(prdct_id,year,sales) values (2,2021,900)
    into sales(prdct_id,year,sales) values (3,2019,300)
    into sales(prdct_id,year,sales) values (3,2020,450)
    into sales(prdct_id,year,sales) values (3,2021,400)
select 1 from dual;

create table product (
    prdct_id number,
    prdct_name varchar(20),
    category varchar(20)
);

insert all 
    into product(prdct_id,prdct_name,category) values (1,'Laptops','Electronics')
    into product(prdct_id,prdct_name,category) values (2,'Jeans','Clothing')
    into product(prdct_id,prdct_name,category) values (3,'Chairs','Home Appliances')
select 1 from dual;

select * from sales;
----------------------------------------
PRDCT_ID	YEAR	SALES
1		2019	1000
1		2020	1200
1		2021	1100
2		2019	500
2		2020	600
2		2021	900
3		2019	300
3		2020	450
3		2021	400
----------------------------------------

select * from product;

----------------------------------------------
PRDCT_ID	PRDCT_NAME	CATEGORY
1		Laptops		Electronics
2		Jeans		Clothing
3		Chairs		Home Appliances
-------------------------------------------------

select p.prdct_id, p.prdct_name, p.category from product p inner join 
(select PRDCT_ID, MIN(diff) as min from
(select prdct_id, year,sales, lag(sales) over (partition by prdct_id order by year) prev_yr_sales,
    sales - lag(sales) over (partition by prdct_id order by year) as diff
    from sales) group by PRDCT_ID having MIN(diff)>0) s on p.prdct_id = s.prdct_id;


with saless as 
    (select PRDCT_ID, MIN(diff) as min from 
    (select prdct_id, year,sales, lag(sales) over (partition by prdct_id order by year) prev_yr_sales, sales - lag(sales) over (partition by prdct_id order by year) as diff from sales) group by PRDCT_ID having MIN(diff)>0)
select p.prdct_id, p.prdct_name, p.category from product p inner join saless s on p.prdct_id = s.prdct_id;

--------------------------------------------
PRDCT_ID	PRDCT_NAME	CATEGORY
2		Jeans		Clothing
--------------------------------------------

-- 08 ###################################################################################################################

create table employee(
    empid number,
    ename varchar(20),
    mgrid number
);

insert all 
    into employee(empid,ename,mgrid) values (1,'Boss',null)
    into employee(empid,ename,mgrid) values (3,'Alice',3)
    into employee(empid,ename,mgrid) values (2,'Bob',1)
    into employee(empid,ename,mgrid) values (4,'Daniel',2)
    into employee(empid,ename,mgrid) values (7,'Luis',4)
    into employee(empid,ename,mgrid) values (8,'Jhon',3)
    into employee(empid,ename,mgrid) values (9,'Angela',8)
    into employee(empid,ename,mgrid) values (77,'Robert',1)
select 1 from dual;

select * from employee;

-- 09 ###################################################################################################################

drop table Grades;
drop table Students;

create table Grades(
    grade number,
    min_mark number,
    max_mark number
);

create table Students(
    id number,
    name varchar(20),
    marks number
);

insert all 
    into Grades(grade,min_mark,max_mark) values (1, 0, 9)
    into Grades(grade,min_mark,max_mark) values (2, 10, 19)
    into Grades(grade,min_mark,max_mark) values (3, 20, 29)
    into Grades(grade,min_mark,max_mark) values (4, 30, 39)
    into Grades(grade,min_mark,max_mark) values (5, 40, 49)
    into Grades(grade,min_mark,max_mark) values (6, 50, 59)
    into Grades(grade,min_mark,max_mark) values (7, 60, 69)
    into Grades(grade,min_mark,max_mark) values (8, 70, 79)
    into Grades(grade,min_mark,max_mark) values (9, 80, 89)
    into Grades(grade,min_mark,max_mark) values (10, 90, 100)
select 1 from dual;

insert all 
    into Students(id,name,marks) values (1,'Julia', 88)
    into Students(id,name,marks) values (2,'Samantha', 68)
    into Students(id,name,marks) values (3,'Maria', 99)
    into Students(id,name,marks) values (4,'Scarlet', 78)
    into Students(id,name,marks) values (5,'Ashley', 63)
    into Students(id,name,marks) values (6,'Jane', 81)
select 1 from dual;


select * from Grades;

select * from Students;


select
    case when 
    	g.grade in (8,9,10) then s.name
    else 
    	Null
    end name,
    g.grade, 
    s.marks 
from Students s inner join Grades g on s.marks>=g.min_mark and s.marks<=g.max_mark 
order by g.grade desc,name asc;



